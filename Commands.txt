
  Id CommandLine
  -- -----------
   1 ls
   2 cd .\_ADP\
   3 cd .\sbom-dotnet\
   4 ls
   5 git clone https://github.com/dotnet/project-system.git
   6 cd ../
   7 ls
   8 cd sbom-java
   9 ls
  10 git clone https://github.com/ja-netfilter/ja-netfilter.git
  11 cd ..
  12 cd .\sbom-python\
  13 git clone https://github.com/databricks-academy/data-engi.netneering-with-databricks.git
  14 git clone https://github.com/databricks-academy/data-engineering-with-databricks.git
  15 cd ..
  16 ls
  17 docker-compose up
  18 docker volumes ls
  19 docker volume ls
  20 docker volume prune
  21 clear
  22 docker volume ls
  23 docker-compose up
  24 docker-compose up
  25 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name sbom_java
  26 docker volume ls
  27 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name=sbom_java
  28 cd .\sbom-java\
  29 ls
  30 docker volume create sbom_java
  31 docker volume ls
  32 docker volume inspect sbom_java
  33 docker build -it java_src .
  34 docker build -t java_src .
  35 docker volume ls
  36 docker run -itd --name java_src --mount source=sbom_java,target=/vol java_src
  37 docker ps -a
  38 docker exec -it java_src sh
  39 docker exec -it java_src /bin/bash
  40 distory


TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          2         2         63.26MB   5.529MB (8%)
Containers      2         2         16.62MB   0B (0%)
Local Volumes   2         2         5.078MB   0B (0%)
Build Cache     95        0         6.395GB   6.395GB



 Id CommandLine
  -- -----------
   1 ls
   2 cd .\_ADP\
   3 cd .\sbom-dotnet\
   4 ls
   5 git clone https://github.com/dotnet/project-system.git
   6 cd ../
   7 ls
   8 cd sbom-java
   9 ls
  10 git clone https://github.com/ja-netfilter/ja-netfilter.git
  11 cd ..
  12 cd .\sbom-python\
  13 git clone https://github.com/databricks-academy/data-engi.netneering-with-databricks.git
  14 git clone https://github.com/databricks-academy/data-engineering-with-databricks.git
  15 cd ..
  16 ls
  17 docker-compose up
  18 docker volumes ls
  19 docker volume ls
  20 docker volume prune
  21 clear
  22 docker volume ls
  23 docker-compose up
  24 docker-compose up
  25 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name sbom_java
  26 docker volume ls
  27 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name=sbom_java
  28 cd .\sbom-java\
  29 ls
  30 docker volume create sbom_java
  31 docker volume ls
  32 docker volume inspect sbom_java
  33 docker build -it java_src .
  34 docker build -t java_src .
  35 docker volume ls
  36 docker run -itd --name java_src --mount source=sbom_java,target=/vol java_src
  37 docker ps -a
  38 docker exec -it java_src sh
  39 docker exec -it java_src /bin/bash
  40 distory
  41 history
  42 docker volume prune
  43 clear
  44 docker rm java_src
  45 docker volume lks
  46 docker volume ls
  47 docker volume ls
  48 docker volume create sbom_python
  49 cd ..
  50 cd .\sbom-python\
  51 ls
  52 clear
  53 docker volume ls
  54 docker run -itd --name python_src --mount source=sbom_python,target=/vol apline
  55 docker build -t python_src .
  56 docker ps -a
  57 docker run -itd --name python_src --mount source=sbom_python,target=/vol python_src
  58 docker exec -it python_src sh
  59 ls
  60 docker volume ls
  61 docker volume inspect sbom_python
  62 docker system dj
  63 docker system df
  64 cd ..
  65 cd .\sbom-dotnet\
  66 ls
  67 docker volume ls
  68 docker volume create sbom_dotnet
  69 docker build -t dotnet_src .


docker run -d --name sbom_scanner --mount source=sbom_python,target=/python_src sbom_scanner --mount source=sbom_dotnet,target=/dotnet_src sbom_scanner --mount source=sbom_java,target=/java_src sbom_scanner
docker run -itd --name sbom_scanner --mount source=sbom_python,target=/python_src --mount source=sbom_dotnet,target=/dotnet_src --mount source=sbom_java,target=/java_src sbom_scanner

docker exec -it sbom_scanner /bin/bash



Created docker volumes localy (named volumes) 

docker run -d -it --name devtest --mount source=sbom_python,target=/python --mount source=sbom_java,target=/java --mount source=sbom_dotnet,target=/dotnet sbom_scanner

docker exec -it devtest /bin/bash


Attach SBOM scanner to volumes and post results
Scanner image created in the first step should be able to scan repositories cloned in the second step.
using the scanner for the primary language that is in the repository. Scanners should generate an SBOM file.
In addition to the language specific SBOM generator, use syft tool to scan repository folder and
generate another SBOM file. Use cyclonedx-cli tool to diff both results, one coming from syft and other one coming
from language specific SBOM generator. At this step, you need to bring DependencyTrack (aka DT available at https://dependencytrack.org/)
online using docker images provided on their web site & docker hub. Once DT is up, post all 3 SBOM files to web service of DT tool for visualization.
Publish the dependencytrack web application’s port so that it can be accessed from a browser outside the container’s environment.

RUNNING DT: docker run -d -m 8192m -p 8080:8080 --name dependency-track -v dependency-track:/data dependencytrack/bundled  

COPY FROM CONAINER TO LOCAL: docker cp 8d0e098f32ee:/java/microservices C:/Users/16096/OneDrive/Desktop/ADP/_ADP/sbom-java

docker build -t java_src .
docker run -it --name java_src --mount source=sbom_java,target=/java_src java_src
docker exec -it java_src /sh
 
mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
syft microservices/ -o cyclonedx-xml >> syft.xml
/cyclonedx diff /java/syft.xml /java/microservices/target/bom.xml

curl -H 'X-API-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w' \
     -H 'Content-Type: multipart/form-data; charset=uft-8; boundary=__X_BOM_BOUNDRY__' \
     -F 'project=16b3c0b4-1c83-4f85-ad0b-c07f215fcd1a' \
     -F 'bom=javacyc2syft.xml' http://localhost:8080/api/v1/bom

curl -X POST http://localhost:8080/api/v1/bom
     -H "Content-Type: application/xml"
     -H "Accept: application/xml"
     -d "<Request><Login>admin</Login><Password>SBOM</Password></Request>"
syft 

curl -X "POST" "http://localhost:8080/api/v1/bom" \
     -H 'Content-Type: multipart/form-data' \
     -H "X-Api-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w" \
     -F "bom=javacyc2syft.xml"

docker build -t python .
docker run -it --name python_src --mount source=sbom_python,target=/python_src python_src
cyclonedx-bom -r -i /python/TechXueXi/requirements.txt -o pythoncycsbom.xml.xml
syft TechXueXi/ -o cyclonedx-xml >> syftpythonsbom.xml
/cyclonedx diff /java/syft.xml /java/microservices/target/bom.xml

gpg --keyserver keyserver.ubuntu.com --recv-key 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB


[root@8d0e098f32ee /]# history
    1  ls
    2  ls -lla
    3  cd python/
    4  ls
    5  cd /java/
    6  ls
    7  cd microservices/
    8  ls
    9  cd ..
   10  ls
   11  cd .
   12  cd ..
   13  ls
   14  cd dotnet/
   15  ls
   16  nuget
   17  apt nuget
   18  dotnet tool install --global CycloneDX --version 2.3.0
   19  dotnet tool install --local CycloneDX --version 2.3.0
   20  dotnet add package CycloneDX.Core
   21  ls
   22  dotnet CycloneDX project-system/ -o /dotnet/
   23  ls
   24  cat bom.xml
   25  ls
   26  cd project-system/
   27  ls
   28  dotnet CycloneDX project-system/* -o /dotnet/
   29  cat NuGet.config
   30  dotnet CycloneDX project-system/NuGet.config -o /dotnet/
   31  dnf install nuget
   32  apt install nuget
   33  apt install nuget
   34  dnf install apt
   35  dnf install nuget
   36  clear
   37  dotnet install nuget
   38  apt
   39  apt-get install nuget
   40  apt-get -v ls
   41  yum install nuget
   42  apt-get install mono-complete
   43  yum install mono-complete
   44  dnf install mono-complete
   45  dnf install mono
   46  dotnet CycloneDX . -o /dotnet/
   47  cd /root/
   48  ls
   49  ls -lla
   50  cd .nuget/
   51  ls
   52  cd NuGet/
   53  ls
   54  cat NuGet.Config
   55  dnf install nuget
   56  which nuget
   57  cd ..
   58  ls
   59  cd ..
   60  ls
   61  ls -lla
   62  cd .dotnet/
   63  ls
   64  cd tools/
   65  ls
   66  cd /
   67  wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb   
   68  dpkg -i packages-microsoft-prod.deb
   69  dnf install dpkg
   70  yum install dpkg
   71  clear
   72  ls
   73  yum install dotnet-sdk-6.0
   74  dpkg -i packages-microsoft-prod.deb
   75  dotnet nuget add source
   76  pwd
   77  ls
   78  cd dotnet/
   79  ls
   80  cd project-system/
   81  ls
   82  dotnet nuget add NuGet.config
   83  dotnet nuget build
   84  ls
   85  cd build
   86  ls
   87  cd ..
   88  dotnet pack
   89  ls
   90  cd ..
   91  dotnet CycloneDX /dotnet/project-system -o /dotnet/
   92  dotnet nuget pack
   93  dotnet nuget --version
   94  dotnet nuget --help
   95  dotnet --help
   96  ls
   97  dotnet build project-system/
   98  dnf install dotnet-runtime-6.0 -y
   99  dotnet nuget update
  100  dotnet nuget update --help
  101  dotnet nuget source
  102  git clone https://github.com/dotnet-architecture/eShopOnContainers.git
  103  ls
  104  dotnet build eShopOnContainers/
  105  cd eShopOnContainers/
  106  dotbet build
  107  dotnet build
  108  ls
  109  dotnet build eShopOnContainers/
  110  ls
  111  cd src/
  112  ls
  113  dotnet build eShopOnContainers/
  114  nupkg
  115  dotnet nuget build
  116  dotnet build
  117  cd ApiGateways/
  118  ls
  119  cd ..
  120  ls
  121  cd ..
  122  ls
  123  cd deploy/
  124  ls
  125  cd ..
  126  ls
  127  cd ..
  128  ls
  129  rm -rf eShopOnContainers/
  130  ls
  131  clear
  132  ls
  133  cat bom.xml
  134  clear
  135  ls
  136  ls
  137  cd project-system/
  138  ls
  139  cd src/
  140  ls
  141  cd ..
  142  ls
  143  cd artifacts/
  144  ls
  145  cd ..
  146  ls
  147  cd setup/
  148  ls
  149  cd ProjectSystemSetup/
  150  ls
  151  cd ..
  152  ls
  153  pwd
  154  dotnet pack /dotnet/project-system/setup/ProjectSystemSetup -c Release
  155  cd ..
  156  cd ..
  157  cd ..
  158  ls
  159  cd dotnet/
  160  ls
  161  clear
  162  ls
  163  rm -rf bom.xml
  164  dotnet CycloneDX /dotnet/project-system -o /dotnet/
  165  cat bom.xml
  166  net CycloneDX /dotnet/project-system/setup/ProjectSystemSetup -o /dotnet/
  167  dotnet CycloneDX /dotnet/project-system/setup/ProjectSystemSetup -o /dotnet/
  168  cat bom.xml
  169  syft project-system/
  170  dotnet restore
  171  ls
  172  cd project-system/
  173  dotnet restore
  174  dotnet build
  175  cd ..
  176  ls
  177  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  178  cat bom.xml
  179  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  180  cat bom.xml
  181  clear
  182  ls
  183  ls
  184  dotnet nuget push
  185  pwd
  186  ls
  187  dotnet nuget push BiliBiliToolPro/
  188  ls
  189  cd BiliBiliToolPro/src/Ray.BiliBiliTool.Console/bin/Debug/
  190  ls
  191  dotnet nuget push
  192  ls
  193  cd ..
  194  ls
  195  cd ../..
  196  ls
  197  cd ..
  198  ls
  199  ls -lla
  200  cd ..
  201  dotnet publish src/Ray.BiliBiliTool.Application/Ray.BiliBiliTool.Application.csproj -c Release -o /publish
  202  cd BiliBiliToolPro/src/Ray.BiliBiliTool.Application/Ray.BiliBiliTool.Application.csproj  
  203  cd BiliBiliToolPro/src/Ray.BiliBiliTool.Application/
  204  ls
  205  dotnet publish "Ray.BiliBiliTool.Application.csproj" -c Release -o /publish
  206  cd ./../../../..
  207  cd dotnet/
  208  ls
  209  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  210  cat bom.xml
  211  cd /root/.nuget/packages
  212  ls
  213  clear
  214  cat /dotnet/BiliBiliToolPro/bom.xml
  215  cat /dotnet/bom.xml
  216  clear
  217  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  218  ls
  219  cd /
  220  ls
  221  cd dotnet/
  222  ls
  223  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  224  cat bom.xml
  225  ls
  226  cd /.nuget/
  227  cd .
  228  ls -lla
  229  cd /
  230  ls -lla
  231  cdm ~
  232  cd ~
  233  cd .nuget/
  234  ls
  235  cd packages/
  236  ls
  237  pwd
  238  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  239  cd /java/
  240  ls
  241  cd microservices/
  242  ls
  243  cd SBOM/
  244  ls
  245  cat javacyc2syft.xml
  246  cd ~
  247  cd /dotnet/
  248  ls
  249  cat bom.xml
  250  ls
  251  cd BiliBiliToolPro/
  252  dotnet build
  253  git status
  254  ls -ltr
  255  ls -lart
  256  date
  257  cat .gitignore
  258  rm -rf .gitignore
  259  ls -lart
  260  git status
  261  cd ..
  262  ls
  263  cd ..
  264  ls
  265  dotnet CycloneDX -r /dotnet/BiliBiliToolPro -o /dotnet/
  266  cd /dotnet/bom.xml
  267  cat /dotnet/bom.xml
  268  clear
  269  CycloneDX -r /dotnet/BiliBiliToolPro -o /dotnet/
  270  dotnet CycloneDX /dotnet/BiliBiliToolPro -o /dotnet/
  271  cat /dotnet/bom.xml
  272  dotnet CycloneDX ~/.nuget/packages/ -o /dotnet/
  273  cat /dotnet/bom.xml
  274  cd /
  275  nuget
  276  yum install nuget
  277  curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
  278  ls
  279  /usr/local/bin/
  280  ls /usr/local/bin/
  281  alias nuget="mono /usr/local/bin/nuget.exe"
  282  nuget
  283  rpm --import 'http://pool.sks-keyservers.net/pks/lookup?op=get&search=0x3fa7e0328081bff6a14da29aa6a19b38d3d831ef'
  284  rpm --import 'http://pool.sks-keyservers.net/pks/lookup?op=get&search=0x3fa7e0328081bff6a14da29aa6a19b38d3d831ef'
  285  gpg --keyserver keyserver.ubuntu.com --recv-key 409B6B1796C275462A1703113804BB82D39DC0E37D2BAF1CF37B13E2069D6956105BD0E739499BDB
  286  gpg --keyserver keyserver.ubuntu.com --recv-key 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
  287  dnf config-manager --add-repo https://download.mono-project.com/repo/centos8-stable.repo 
  288  dnf install config-manager
  289  dnf --help
  290  yum install dnf-plugins-core
  291  dnf config-manager --add-repo https://download.mono-project.com/repo/centos8-stable.repo 
  292  history
 290  yum install dnf-plugins-core
  291  dnf config-manager --add-repo https://download.mono-project.com/repo/centos8-stable.repo 
  292  history
  293  nuget
  294  dnf install mono-complete
  295  history


curl -H 'X-API-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w' -H 'Content-Type: multipart/form-data; charset=uft-8; boundary=__X_BOM_BOUNDRY__' -F 'project=16b3c0b4-1c83-4f85-ad0b-c07f215fcd1a' -F 'bom=javacyc2syft.xml' http://localhost:8080/api/v1/bom

curl -X "POST" "http://localhost:8080/api/v1/bom" -H 'Content-Type: multipart/form-data' -H "X-Api-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w" -F "bom=javacyc2syft.xml"

docker cp ./java/microservices/SBOM:8d0e098f32ee C:/Users/16096/OneDrive/Desktop/ADP/_ADP/sbom-java

dotnet CycloneDX /dotnet/shadowsocks-windows/shadowsocks-windows.sln -o /dotnet/
syft shadowsocks-windows/ -o cyclonedx-xml >> syftdotnetbom.xml


curl 'XPOST' 'http://localhost:8080/api/v1/bom' -H 'Content-Type: multipart/form-data' -H 'X-Api-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w' -F 'autoCreate=true' -F 'projectName=java' -F 'projectVersion=1.0.0' -F 'bom=@javacyc2syft.xml'

curl -v -X 'POST' "http://localhost:8080/api/v1/bom" -H 'Content-Type: multipart/form-data' -H "X-Api-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w" -F "bom=bom.xml"

curl -H "X-Api-Key: 6VZtc3awG1YuegAWrwgHM7bZlvHP5J0w" -H 'Content-Type: multipart/form-data; charset=uft-8; boundary=__X_BOM_BOUNDRY__' -F 'project=16b3c0b4-1c83-4f85-ad0b-c07f215fcd1a' -F "bom=bom.xml" http://localhost:8080/api/v1/bom

curl -v -X POST http://localhost:8080/api/v1/bom -H "Content-Type: application/xml" -H "Accept: application/xml" -F "bom=bom.xml" -d "<Request><Login>admin</Login><Password>SBOM</Password></Request>"

docker run -e POSTGRES_HOST_AUTH_METHOD=trust postgres:10.10
docker pull  --> pull images locally 
docker run
docker run -d {image} --> detached mode
docker start
docker stop
docker ps  --> list of running containers
docker ps -a --> lists running and stopped containers 
docker run -p{localport}:{dockerport} {image} --> binds the host port to docker container port
docker images --> list all images locally
docker rm -f $(docker ps -a -q) ---> remove all images


Troubleshooting 
docker log {container_id}
docker log {nameofcontianer}
docker run -d -p{hostport}:{container-port} --name {desired-image-name} {image-to-use}
docker exec -it {contianer-id or cotianer-name} /bin/bash  --> Interactive terminal inside the containers

docker run --> create a new cotianer from an image 
docker start --> starting a container 


Listing the OS info:
cat etc/os-release 


Nuget does not work -- (To DO)


URL=$(curl -L -s https://api.github.com/CycloneDX/cyclonedx-cli/releases/v0.24.0 | grep -o -E "https://(.*)projectname_(.*)_linux_amd64.tar.gz")

# Download and extract the release to the build dir.
curl -L -s $URL | tar xvz -C ./extract-dir


https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.0/cyclonedx-linux-arm64 


Create a docker image containing an SBOM scanner
Create a docker image based on Centos8 and install following tools :

• https://github.com/anchore/syft

• https://github.com/CycloneDX/cyclonedx-cli

• https://www.npmjs.com/package/@cyclonedx/bom

• https://github.com/CycloneDX/cyclonedx-core-java

• https://pypi.org/project/cyclonedx-python-lib/

• https://www.nuget.org/profiles/CycloneDX

Once all software is installed, make sure that the command ‘cyclonedx --version’ can be run in the container. Validate the output to ensure it is installed correctly.

 

Create three docker volumes and clone projects into them.
Pick one active and possibly large Java project, one Python project, and one .Net project from GitHub 
(use https://github.com/trending/java for example). 
Create three docker volumes named ‘sbom-java’, ‘sbom-python’, and ‘sbom-dotnet’. For each project you selected, 
create a docker volume and clone one of the projects you selected into each volume. 
You may use a simple, publicly available base image to clone the projects into the volumes.



Attach SBOM scanner to volumes and post results
Scanner image created in the first step should be able to scan repositories cloned in the second step. 
using the scanner for the primary language that is in the repository. Scanners should generate an SBOM file. 
In addition to the language specific SBOM generator, use syft tool to scan repository folder and 
generate another SBOM file. Use cyclonedx-cli tool to diff both results, one coming from syft and other one coming 
from language specific SBOM generator. At this step, you need to bring DependencyTrack (aka DT available at https://dependencytrack.org/) 
online using docker images provided on their web site & docker hub. Once DT is up, post all 3 SBOM files to web service of DT tool for visualization. 
Publish the dependencytrack web application’s port so that it can be accessed from a browser outside the container’s environment.

Ref: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
dotnet build [<PROJECT>|<SOLUTION>] [-a|--arch <ARCHITECTURE>]
    [-c|--configuration <CONFIGURATION>] [-f|--framework <FRAMEWORK>]
    [--force] [--interactive] [--no-dependencies] [--no-incremental]
    [--no-restore] [--nologo] [--no-self-contained] [--os <OS>]
    [-o|--output <OUTPUT_DIRECTORY>] [-r|--runtime <RUNTIME_IDENTIFIER>]
    [--self-contained [true|false]] [--source <SOURCE>]
    [-v|--verbosity <LEVEL>] [--version-suffix <VERSION_SUFFIX>]

dotnet build -h|--help
.net image: docker pull mcr.microsoft.com/dotnet/samples
.net github code: https://github.com/dotnet/project-system.git

REF: https://packaging.python.org/en/latest/tutorials/packaging-projects/
REF: https://earthly.dev/blog/python-makefile/
Python compile command: 
	python -m py_compile main.py



Notes:

Java Project: https://github.com/ja-netfilter/ja-netfilter.git --> 1. Create a volume have this code inside the volume 2. I want to run my sbom scanner container on this soruce code (Bind mounts)

docker run -v %location or src%:/opt/j_sbom

docker run -it -v C:/Users/shaislam/Desktop/Scanner/Java_target:/javaproject/target javaprj /bin/bash docker run -it -v C:/Users/shaislam/Desktop/Scanner/jsom_scanner:/javaproject/ javaprj /bin/bash docker run -it -v C:/Users/shaislam/Desktop/Scanner/jsom_scanner:/javaproject scanner_sbom /bin/bash

docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /usr/libexec/docker:/usr/libexec/docker -v C:/Users/shaislam/Desktop/Scanner/jsom_scanner:/javaproject scanner_sbom /bin/bash

Basic Dockerfile Image with mount and mvn sintall
FROM maven:3.8.5-jdk-8

RUN git clone https://github.com/jabedhasan21/java-hello-world-with-maven.git /javaproject/

ENTRYPOINT ["/bin/bash", "cd /javaproject/java-hello-world-with-maven && mvn clean install"]

For example, an unrecognized jvm option is used.


docker run -it -v C:/Users/shaislam/Desktop/Scanner/Java_target:/javaproject/target javaprj /bin/bash docker run -it -v C:/Users/shaislam/Desktop/Scanner/jsom_scanner:/javaproject/ javaprj /bin/bash docker run -it -v C:/Users/shaislam/Desktop/Scanner/jsom_scanner:/javaproject scanner_sbom /bin/bash

dotnet
docker run -it -v sbom_dotnet:/dotnet_src sbom_scanner -v sbom_java:/java_src sbom_scanner -v sbom_python:/python_src sbom_scanner /bin/bash

docker run -it -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /usr/libexec/docker:/usr/libexec/docker dev-test /bin/bash


  Id CommandLine
  -- -----------
   1 ls
   2 cd .\_ADP\
   3 cd .\sbom-dotnet\
   4 ls
   5 git clone https://github.com/dotnet/project-system.git
   6 cd ../
   7 ls
   8 cd sbom-java
   9 ls
  10 git clone https://github.com/ja-netfilter/ja-netfilter.git
  11 cd ..
  12 cd .\sbom-python\
  13 git clone https://github.com/databricks-academy/data-engi.netneering-with-databricks.git
  14 git clone https://github.com/databricks-academy/data-engineering-with-databricks.git
  15 cd ..
  16 ls
  17 docker-compose up
  18 docker volumes ls
  19 docker volume ls
  20 docker volume prune
  21 clear
  22 docker volume ls
  23 docker-compose up
  24 docker-compose up
  25 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name sbom_java
  26 docker volume ls
  27 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name=sbom_java
  28 cd .\sbom-java\
  29 ls
  30 docker volume create sbom_java
  31 docker volume ls
  32 docker volume inspect sbom_java
  33 docker build -it java_src .
  34 docker build -t java_src .
  35 docker volume ls
  36 docker run -itd --name java_src --mount source=sbom_java,target=/vol java_src
  37 docker ps -a
  38 docker exec -it java_src sh
  39 docker exec -it java_src /bin/bash
  40 distory


TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          2         2         63.26MB   5.529MB (8%)
Containers      2         2         16.62MB   0B (0%)
Local Volumes   2         2         5.078MB   0B (0%)
Build Cache     95        0         6.395GB   6.395GB



 Id CommandLine
  -- -----------
   1 ls
   2 cd .\_ADP\
   3 cd .\sbom-dotnet\
   4 ls
   5 git clone https://github.com/dotnet/project-system.git
   6 cd ../
   7 ls
   8 cd sbom-java
   9 ls
  10 git clone https://github.com/ja-netfilter/ja-netfilter.git
  11 cd ..
  12 cd .\sbom-python\
  13 git clone https://github.com/databricks-academy/data-engi.netneering-with-databricks.git
  14 git clone https://github.com/databricks-academy/data-engineering-with-databricks.git
  15 cd ..
  16 ls
  17 docker-compose up
  18 docker volumes ls
  19 docker volume ls
  20 docker volume prune
  21 clear
  22 docker volume ls
  23 docker-compose up
  24 docker-compose up
  25 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name sbom_java
  26 docker volume ls
  27 docker volume create -d local-presist -o mountpoint=_ADP/sbom-java/ --name=sbom_java
  28 cd .\sbom-java\
  29 ls
  30 docker volume create sbom_java
  31 docker volume ls
  32 docker volume inspect sbom_java
  33 docker build -it java_src .
  34 docker build -t java_src .
  35 docker volume ls
  36 docker run -itd --name java_src --mount source=sbom_java,target=/vol java_src
  37 docker ps -a
  38 docker exec -it java_src sh
  39 docker exec -it java_src /bin/bash
  40 distory
  41 history
  42 docker volume prune
  43 clear
  44 docker rm java_src
  45 docker volume lks
  46 docker volume ls
  47 docker volume ls
  48 docker volume create sbom_python
  49 cd ..
  50 cd .\sbom-python\
  51 ls
  52 clear
  53 docker volume ls
  54 docker run -itd --name python_src --mount source=sbom_python,target=/vol apline
  55 docker build -t python_src .
  56 docker ps -a
  57 docker run -itd --name python_src --mount source=sbom_python,target=/vol python_src
  58 docker exec -it python_src sh
  59 ls
  60 docker volume ls
  61 docker volume inspect sbom_python
  62 docker system dj
  63 docker system df
  64 cd ..
  65 cd .\sbom-dotnet\
  66 ls
  67 docker volume ls
  68 docker volume create sbom_dotnet
  69 docker build -t dotnet_src .


docker run -d --name sbom_scanner --mount source=sbom_python,target=/python_src sbom_scanner --mount source=sbom_dotnet,target=/dotnet_src sbom_scanner --mount source=sbom_java,target=/java_src sbom_scanner
docker run -itd --name sbom_scanner --mount source=sbom_python,target=/python_src --mount source=sbom_dotnet,target=/dotnet_src --mount source=sbom_java,target=/java_src sbom_scanner

docker exec -it sbom_scanner /bin/bash



Created docker volumes localy (named volumes) 

docker run -d -it --name devtest --mount source=sbom_python,target=/python --mount source=sbom_java,target=/java --mount source=sbom_dotnet,target=/dotnet sbom_scanner

docker exec -it devtest /bin/bash


Attach SBOM scanner to volumes and post results
Scanner image created in the first step should be able to scan repositories cloned in the second step.
using the scanner for the primary language that is in the repository. Scanners should generate an SBOM file.
In addition to the language specific SBOM generator, use syft tool to scan repository folder and
generate another SBOM file. Use cyclonedx-cli tool to diff both results, one coming from syft and other one coming
from language specific SBOM generator. At this step, you need to bring DependencyTrack (aka DT available at https://dependencytrack.org/)
online using docker images provided on their web site & docker hub. Once DT is up, post all 3 SBOM files to web service of DT tool for visualization.
Publish the dependencytrack web application’s port so that it can be accessed from a browser outside the container’s environment.

RUNNING DT: 
docker run -d -m 8192m -p 8080:8080 --name dependency-track -v dependency-track:/data dependencytrack/bundled  

COPY FROM CONAINER TO LOCAL: 
docker cp 8d0e098f32ee:/java/microservices C:/Users/16096/OneDrive/Desktop/ADP/_ADP/sbom-java

docker build -t java_src .
docker run -it --name java_src --mount source=sbom_java,target=/java_src java_src
docker exec -it java_src /sh
 
mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
syft microservices/ -o cyclonedx-xml >> syft.xml
/cyclonedx diff /java/syft.xml /java/microservices/target/bom.xml

curl -X "PUT" "http://dtrack.example.com/api/v1/bom" \
     -H 'Content-Type: application/json' \
     -H 'X-API-Key: LPojpCDSsEd4V9Zi6qCWr4KsiF3Konze' \
     -F 'project=16b3c0b4-1c83-4f85-ad0b-c07f215fcd1a" \
     -F 'bom=javacyc2syft.xml' 
  }'

docker build -t python .
docker run -it --name python_src --mount source=sbom_python,target=/python_src python_src
cyclonedx-bom -r -i /python/TechXueXi/requirements.txt -o pythoncycsbom.xml.xml
syft TechXueXi/ -o cyclonedx-xml >> syftpythonsbom.xml
 /cyclonedx diff bom.xml syft.xml --component-versions >javacyc2syft.xml
 /cyclonedx diff pythoncycsbom.xml syftpythonsbom.xml --component-versions > pythoncyc2syft.xml

 COPY FROM CONAINER TO LOCAL: 
docker cp 8d0e098f32ee:/python C:/Users/16096/OneDrive/Desktop/ADP/_ADP/sbom-python


DOTNET
docker run -it --name dotnet_src --mount source=sbom_dotnet,target=/sbom_dotnet dotnet_src
dotnet CycloneDX /dotnet/project-system -o /dotnet/


dotnet CycloneDX /dotnet/dotnet/Dapper -o /dotnet/


DotNET: 
   57  dotnet CycloneDX Dapper.sln -o /dotnet/
   58  cd Dapper/
   59  dotnet CycloneDX Dapper.sln -o /dotnet/
   60  ls
   61  cd ..
   62  ls
   63  cat bom.xml
   64  syft Dapper/
   65  syft /root/.nuget/packages/
   66  dotnet CycloneDX Dapper/Dapper.csproj -o /dotnet/ -r
   67  dotnet CycloneDX Dapper/Build.csproj -o /dotnet/ -r
   68  ls
   69  cat bom.xml
   70  syft /dotnet/
   71  history

